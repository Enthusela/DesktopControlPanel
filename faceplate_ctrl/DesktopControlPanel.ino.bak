#include "DesktopControlPanel.h"
#define DECODE_NEC
#define DEBUG
#define RAW_BUFFER_LENGTH 132
#include <IRremote.hpp>

// ARGB
CHSV argbHSV;
CRGB fanTopRearPixels[ARGB_FAN_TOP_REAR_LED_NUM];
CRGB fanTopFrontPixels[ARGB_FAN_TOP_FRONT_LED_NUM];
CRGB fanFrontTopPixels[ARGB_FAN_FRONT_TOP_LED_NUM];
CRGB fanFrontMidPixels[ARGB_FAN_FRONT_MID_LED_NUM];
CRGB fanFrontLowPixels[ARGB_FAN_FRONT_LOW_LED_NUM];
CRGB fanRearPixels[ARGB_FAN_REAR_LED_NUM];
CRGB supportPixels[ARGB_SUPPORT_LED_NUM];

// Faceplate
bool pcAudioMode = false;
bool pcAudioModePrev = false;
bool ctrlMode;
bool ctrlModeChanged;
bool ctrlModePrev;
bool lightTemperatureMode = false;
Potentiometer pot1 = Potentiometer(POT1_PIN, ANALOG_MAX, POT_ANGLE_MIN, POT_ANGLE_MAX, POT_LINEAR);
Potentiometer pot2 = Potentiometer(POT2_PIN, ANALOG_MAX, POT_ANGLE_MIN, POT_ANGLE_MAX, POT_LINEAR);
Potentiometer pot3 = Potentiometer(POT3_PIN, ANALOG_MAX, POT_ANGLE_MIN, POT_ANGLE_MAX, POT_LINEAR);
Potentiometer pot4 = Potentiometer(POT4_PIN, ANALOG_MAX, POT_ANGLE_MIN, POT_ANGLE_MAX, POT_LOGARITHMIC);
SoftTakeoverLEDs pot1LEDs = SoftTakeoverLEDs(2, POT_ANGLE_MIN, POT_ANGLE_MAX, STO1_LED1_PIN, STO1_LED2_PIN);
SoftTakeoverLEDs pot2LEDs = SoftTakeoverLEDs(2, POT_ANGLE_MIN, POT_ANGLE_MAX, STO2_LED1_PIN, STO2_LED2_PIN);
SoftTakeoverLEDs pot3LEDs = SoftTakeoverLEDs(2, POT_ANGLE_MIN, POT_ANGLE_MAX, STO3_LED1_PIN, STO3_LED2_PIN);
ControlPot ctrlPotKelv = ControlPot(&pot1, ARGB_LED_KELV_MIN, ARGB_LED_KELV_MAX, &pot1LEDs);
ControlPot ctrlPotHue  = ControlPot(&pot1, ARGB_LED_HUE_MIN, ARGB_LED_HUE_MAX, &pot1LEDs);
ControlPot ctrlPotSat  = ControlPot(&pot2, ARGB_LED_SAT_MIN, ARGB_LED_SAT_MAX, &pot2LEDs);
ControlPot ctrlPotVal  = ControlPot(&pot3, ARGB_LED_VAL_MIN, ARGB_LED_VAL_MAX, &pot3LEDs);
ControlPot ctrlPotPCVolApp1 = ControlPot(&pot1, 0, ANALOG_MAX, &pot1LEDs);
ControlPot ctrlPotPCVolApp2 = ControlPot(&pot2, 0, ANALOG_MAX, &pot2LEDs);
ControlPot ctrlPotPCVolApp3 = ControlPot(&pot3, 0, ANALOG_MAX, &pot3LEDs);
ControlPot ctrlPotPCVolMain = ControlPot(&pot4, 0, ANALOG_MAX);
uint16_t pcVolumeApp1;
uint16_t pcVolumeApp2;
uint16_t pcVolumeApp3;
uint16_t pcVolumeMain;

// RF
RCSwitch mySwitch = RCSwitch();

//Serial
uint32_t serialWriteTimeLast = 0;

void setup() {
    setupSerial();
    setupFaceplatePinModes();
    setupFaceplateInputInitialValues();
    // setupIRTransceiver();
    setupLighting();
    setupRFTransceiver();
}

void loop() {
    readFaceplateInputs();
    // readRFReceiver();
    pcVolumeMain = ctrlPotPCVolMain.getValue();
    setValuesForActiveCtrlMode();
    showARGBColorIfDisplayTimeElapsed();
    sendCommandsToPCIfWriteTimeElapsed();
    showSTOLeds();
}

void setupSerial() {
    Serial.begin(9600);
    Serial.println(F("START " __FILE__ " at " __TIMESTAMP__));
    Serial.flush();
}

void setupFaceplatePinModes() {
    pinMode(SW_R_1_PIN, INPUT_PULLUP);
    pinMode(SW_R_2_PIN, INPUT_PULLUP);
    pinMode(SW_R_3_PIN, INPUT_PULLUP);
    pinMode(SW_R_4_PIN, INPUT_PULLUP);
    pinMode(SW_T_1_PIN, INPUT_PULLUP);
    pinMode(SW_T_2_PIN, INPUT_PULLUP);
    pinMode(SW_T_3_PIN, INPUT_PULLUP);
    pinMode(SW_P_1_PIN, INPUT_PULLUP);
    pinMode(SW_P_2_PIN, INPUT_PULLUP);
    pinMode(SW_P_3_PIN, INPUT_PULLUP);
}

void setupFaceplateInputInitialValues() {
    pcAudioMode = digitalRead(SW_R_4_PIN);
    ctrlMode = digitalRead(SW_R_3_PIN);
    ctrlModePrev = false;
    ctrlModeChanged = false;
    lightTemperatureMode = digitalRead(SW_T_2_PIN);
    ctrlPotHue.getValue();
    ctrlPotSat.getValue();
    ctrlPotVal.getValue();
    ctrlPotKelv.getValue();
    pcVolumeApp1 = ctrlPotPCVolApp1.getValue();
    pcVolumeApp2 = ctrlPotPCVolApp2.getValue();
    pcVolumeApp3 = ctrlPotPCVolApp3.getValue();
    pcVolumeMain = ctrlPotPCVolMain.getValue();
}

void setupIRTransceiver() {
    IrReceiver.begin(IR_RX_PIN, ENABLE_LED_FEEDBACK);
    Serial.println(F("Ready to receive IR signals of protocols: "));
    IrReceiver.printActiveIRProtocols(&Serial);
    Serial.println();
    Serial.flush();
}

void setupLighting() {
    FastLED.addLeds<ARGB_FAN_TOP_REAR_CHIPSET,ARGB_FAN_TOP_REAR_PIN,ARGB_FAN_TOP_REAR_ORDER>(fanTopRearPixels,ARGB_FAN_TOP_REAR_LED_NUM);
    FastLED.addLeds<ARGB_FAN_TOP_FRONT_CHIPSET,ARGB_FAN_TOP_FRONT_PIN,ARGB_FAN_TOP_FRONT_ORDER>(fanTopFrontPixels,ARGB_FAN_TOP_FRONT_LED_NUM);
    FastLED.addLeds<ARGB_FAN_FRONT_TOP_CHIPSET,ARGB_FAN_FRONT_TOP_PIN,ARGB_FAN_FRONT_TOP_ORDER>(fanFrontTopPixels,ARGB_FAN_FRONT_TOP_LED_NUM);
    FastLED.addLeds<ARGB_FAN_FRONT_MID_CHIPSET,ARGB_FAN_FRONT_MID_PIN,ARGB_FAN_FRONT_MID_ORDER>(fanFrontMidPixels,ARGB_FAN_FRONT_MID_LED_NUM);
    FastLED.addLeds<ARGB_FAN_FRONT_LOW_CHIPSET,ARGB_FAN_FRONT_LOW_PIN,ARGB_FAN_FRONT_LOW_ORDER>(fanFrontLowPixels,ARGB_FAN_FRONT_LOW_LED_NUM);
    FastLED.addLeds<ARGB_FAN_REAR_CHIPSET,ARGB_FAN_REAR_PIN,ARGB_FAN_REAR_ORDER>(fanRearPixels,ARGB_FAN_REAR_LED_NUM);
    FastLED.addLeds<ARGB_SUPPORT_CHIPSET,ARGB_SUPPORT_PIN,ARGB_SUPPORT_ORDER>(supportPixels,ARGB_SUPPORT_LED_NUM);
    delay(1000);
    FastLED.clear(true);
    delay(1000);
    setARGBColorValues();
    FastLED.showColor(argbHSV, ARGB_LED_VAL_MAX);
    delay(1000);
}

void setupRFTransceiver() {
    mySwitch.enableReceive(0);
}

void readFaceplateInputs() {
    pcAudioModePrev = pcAudioMode;
    pcAudioMode = digitalRead(SW_R_4_PIN);
    ctrlModePrev = ctrlMode;
    ctrlMode = digitalRead(SW_R_3_PIN);
    ctrlModeChanged = (ctrlMode != ctrlModePrev);
    lightTemperatureMode = digitalRead(SW_R_2_PIN);
}

void readIRReceiver() {
    static uint32_t lastReadTime;
    if (millis() - lastReadTime > 150) {
        lastReadTime = millis();
        if (IrReceiver.decode()) {
            IrReceiver.printIRResultShort(&Serial); // Print complete received data in one line
            // IrReceiver.printIRSendUsage(&Serial);   // Print the statement required to send this data
            IrReceiver.resume();
        }
    }
}

void readRFReceiver() {
    if (mySwitch.available()) {
        Serial.println(F("mySwitch.available"));
        output(mySwitch.getReceivedValue(), mySwitch.getReceivedBitlength(), mySwitch.getReceivedDelay(), mySwitch.getReceivedRawdata(),mySwitch.getReceivedProtocol());
        mySwitch.resetAvailable();
    }
}

void setValuesForActiveCtrlMode() {
    if (ctrlMode == CTRL_MODE_ARGB) {
        setARGBColorValues();
    }
    else if (ctrlMode == CTRL_MODE_VOLUME) {
        setPCAppVolumeValues();
    }
}

void setARGBColorValues() {
    if (lightTemperatureMode) {
        argbHSV = colorTemperatureToHSV(ctrlPotKelv.getValue(ctrlModeChanged));
    }
    else {
        argbHSV = colorHueToHSV(ctrlPotHue.getValue(ctrlModeChanged));
    }
    ctrlPotSat.getValue();
    ctrlPotVal.getValue();
    argbHSV.sat *= ctrlPotSat.getValuePercent();
    argbHSV.val *= ctrlPotVal.getValuePercent();
}

void setPCAppVolumeValues() {
    pcVolumeApp1 = ctrlPotPCVolApp1.getValue(ctrlModeChanged);
    pcVolumeApp2 = ctrlPotPCVolApp2.getValue(ctrlModeChanged);
    pcVolumeApp3 = ctrlPotPCVolApp3.getValue(ctrlModeChanged);    
}

void showARGBColorIfDisplayTimeElapsed() {
    if (ARGBDisplayTimeHasElapsed()) {
        // FastLED.showColor(argbHSV, ARGB_LED_VAL_MAX);
        FastLED.showColor(argbHSV, ARGB_LED_VAL_MAX);
        // Update each device individually reduces time FastLED disables interrupts, preventing lost IR data
        // fill_solid(fanTopRearPixels, ARGB_FAN_TOP_REAR_LED_NUM, argbHSV);
        // fill_solid(fanTopFrontPixels, ARGB_FAN_TOP_FRONT_LED_NUM, argbHSV);
        // fill_solid(fanFrontTopPixels, ARGB_FAN_FRONT_TOP_LED_NUM, argbHSV);
        // fill_solid(fanFrontMidPixels, ARGB_FAN_FRONT_MID_LED_NUM, argbHSV);
        // fill_solid(fanFrontLowPixels, ARGB_FAN_FRONT_LOW_LED_NUM, argbHSV);
        // fill_solid(fanRearPixels, ARGB_FAN_REAR_LED_NUM, argbHSV);
        // fill_solid(supportPixels, ARGB_SUPPORT_LED_NUM, argbHSV);
        // for (int i = 0; i < ARGB_DEVICE_NUMBER; i++) {
        //     FastLED[i].showLeds(ARGB_LED_VAL_MAX);
        // }
    }
}

bool ARGBDisplayTimeHasElapsed() {
    static uint32_t argbDisplayTimeLast;
    const uint16_t argbDisplayPeriod = 1000/ARGB_LED_FPS;
    if (periodHasElapsedSinceLastTime(argbDisplayTimeLast, argbDisplayPeriod)) {
        argbDisplayTimeLast = millis();
        return true;
    }
    return false;
}

void sendCommandsToPCIfWriteTimeElapsed() {
    if (commandWriteTimeHasElapsed()) {
        String commands;
        commands = getCommands();
        Serial.println(commands);
        Serial.flush();
    }
}

bool commandWriteTimeHasElapsed() {
    static uint32_t lastWriteTime;
    const uint8_t updatesPerSecond = 100;
    const uint16_t writePeriod = 1000/updatesPerSecond;
    if (periodHasElapsedSinceLastTime(writePeriod, lastWriteTime)) {
        lastWriteTime = millis();
        return true;
    }
    return false;
}

bool periodHasElapsedSinceLastTime(uint32_t period, uint32_t lastTime) {
    return ((millis() - lastTime) > period);
}

int16_t scaleValueByControlPot(int value, ControlPot *ctrlPot) {
    return value *= float(ctrlPot->getValue()) / float(ctrlPot->getValueMax());
}

String getCommands() {
    String commands = "STT";
    commands += ",A " + String(pcAudioMode);
    commands += ",V1 " + String(pcVolumeApp1);
    commands += ",V2 " + String(pcVolumeApp2);
    commands += ",V3 " + String(pcVolumeApp3);
    commands += ",VM " + String(pcVolumeMain);
    return commands;
}

void printDiagnostics() {
    char text[150];
    int rsw1 = digitalRead(SW_R_1_PIN);
    int rsw2 = digitalRead(SW_R_2_PIN);
    int rsw3 = digitalRead(SW_R_3_PIN);
    int rsw4 = digitalRead(SW_R_4_PIN);
    int tsw1 = digitalRead(SW_T_1_PIN);
    int tsw2 = digitalRead(SW_T_2_PIN);
    int tsw3 = digitalRead(SW_T_3_PIN);
    int psw1 = digitalRead(SW_P_1_PIN);
    int psw2 = digitalRead(SW_P_2_PIN);
    int psw3 = digitalRead(SW_P_3_PIN);
    int pot1 = analogRead(POT1_PIN);
    int pot2 = analogRead(POT2_PIN);
    int pot3 = analogRead(POT3_PIN);
    int pot4 = analogRead(POT4_PIN);
    sprintf(text, "rsw1 %04i rsw2 %04i rsw3 %04i rsw4 %04i || tsw1 %04i tsw2 %04i tsw3  %04i || psw1 %04i psw2 %04i psw3 %04i || pot1 %04i pot2 %04i pot3 %04i pot4 %04i",
    rsw1, rsw2, rsw3, rsw4, tsw1, tsw2, tsw3, psw1, psw2, psw3, pot1, pot2, pot3, pot4);
    Serial.println(text);
    char hsv_values[12];
    uint16_t temp = ctrlPotKelv.getValue();
    sprintf(hsv_values, "%04i %03i %03i %03i", temp, argbHSV.h, argbHSV.s, argbHSV.v);
    Serial.println(hsv_values);
}

void showSTOLeds() {
    const int ledNum = 6;
    int pins[ledNum] = {STO1_LED1_PIN, STO1_LED2_PIN, STO2_LED1_PIN, STO2_LED2_PIN, STO3_LED1_PIN, STO3_LED2_PIN};
    int activeLED = (analogRead(POT1_PIN) / 100) % ledNum;
    int brightness = 255;//map(analogRead(POT2_PIN), 0, ANALOG_MAX, STO_LED_MIN_BRIGHTNESS, STO_LED_MAX_BRIGHTNESS);
    for (int i = 0; i < ledNum; i++) {
        bool ledOn = (pins[i] = STO1_LED1_PIN || activeLED == 0);
        analogWrite(pins[i], ledOn ? brightness : 0);
    }
}

static const char* bin2tristate(const char* bin);
static char * dec2binWzerofill(unsigned long Dec, unsigned int bitLength);

void output(unsigned long decimal, unsigned int length, unsigned int delay, unsigned int* raw, unsigned int protocol) {

  const char* b = dec2binWzerofill(decimal, length);
  Serial.print("Decimal: ");
  Serial.print(decimal);
  Serial.print(" (");
  Serial.print( length );
  Serial.print("Bit) Binary: ");
  Serial.print( b );
  Serial.print(" Tri-State: ");
  Serial.print( bin2tristate( b) );
  Serial.print(" PulseLength: ");
  Serial.print(delay);
  Serial.print(" microseconds");
  Serial.print(" Protocol: ");
  Serial.println(protocol);
  
  Serial.print("Raw data: ");
  for (unsigned int i=0; i<= length*2; i++) {
    Serial.print(raw[i]);
    Serial.print(",");
  }
  Serial.println();
  Serial.println();
}

static const char* bin2tristate(const char* bin) {
  static char returnValue[50];
  int pos = 0;
  int pos2 = 0;
  while (bin[pos]!='\0' && bin[pos+1]!='\0') {
    if (bin[pos]=='0' && bin[pos+1]=='0') {
      returnValue[pos2] = '0';
    } else if (bin[pos]=='1' && bin[pos+1]=='1') {
      returnValue[pos2] = '1';
    } else if (bin[pos]=='0' && bin[pos+1]=='1') {
      returnValue[pos2] = 'F';
    } else {
      return "not applicable";
    }
    pos = pos+2;
    pos2++;
  }
  returnValue[pos2] = '\0';
  return returnValue;
}

static char * dec2binWzerofill(unsigned long Dec, unsigned int bitLength) {
  static char bin[64]; 
  unsigned int i=0;

  while (Dec > 0) {
    bin[32+i++] = ((Dec & 1) > 0) ? '1' : '0';
    Dec = Dec >> 1;
  }

  for (unsigned int j = 0; j< bitLength; j++) {
    if (j >= bitLength - i) {
      bin[j] = bin[ 31 + i - (j - (bitLength - i)) ];
    } else {
      bin[j] = '0';
    }
  }
  bin[bitLength] = '\0';
  
  return bin;
}