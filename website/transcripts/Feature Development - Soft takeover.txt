Feature development, soft takeover.I'm a little sleepy at the minute, so maybe I'll come back to this, but I'll give it a go.Anyway, the point is, soft takeover.So right from the start, I knew I had a limited number of control surfaces and control knobs on the control panel that I could use.I knew that I would also want potentially more than one function or set of functions associated with those control panels, so some way of switching between them was a must.That is to say, key point here, enter, enter, I needed a method that would allow one control surface, such as a potentiometer, to control multiple control parameters, e.g.color, hue on one mode and app volume on another mode, such that they would remember the values in between different modes, and the user could switch between different modes, i.e.potentially very different values, without experiencing a jump from one to the other.What I mean by a jump is, if you have, say, your color hue set to half, or whatever half corresponds to, in this case it would be 128 in an 8-bit color space, and you have your volume set to, say, max, which would be 1023 in a 10-bit volume space, when you switch from volume to color, you don't want the color to jump to max, because that's where the volume was.Obviously the physical position of the potentiometer hasn't moved, but the new value that is associated with that potentiometer, when you switch modes, has changed substantially, and you don't want that to jump.You don't want the PC case to suddenly change color any more than you want the PC volume to suddenly be screeching in your ears.Not fun.So a key point in trying to function like this exists.It's called soft takeover, and effectively what it is, is when you have one control surface, like a potentiometer controlling two or more values, each value will of course have a physical position associated with it.So for instance, 128, which is the mid-range for color, will be potentiometer at 12 o'clock, halfway through its range, and full volume, or 1023, will be associated with, it's about 4.30pm, all the way over to the right.So the idea of soft takeover is that if you enter a mode, and the...Actually, let me start again.So key point, defining soft takeover, when you have one control surface like a potentiometer associated with multiple different control variables, like for instance, color hue value and PC volume, the physical position of the potentiometer will give it a certain output.In this case it's an output in the range from 0 to 1023, so 10 bit ADC.And the output from the control surface will correspond to some value from the control variable.So in this case, you know, what would it be? 512, which is halfway through the volume control pots, or 512, which is halfway through a control pot's range, might correspond to 128 for color values, and it might correspond to 16 for some 32-bit value, and it corresponds just to 512 for a 10-bit value, like volume.So, and I'm getting a little lost here, but basically...So with soft takeover, what you have is you have one control surface, or potentiometer, which will output values from a certain range, and you have multiple control variables that then correspond to that range.So for instance, one potentiometer might output a value from 0 to 1023, 10-bit range.That might then be mapped across to a control, a color value, which is 0 to 255, and you know what, I'm overcomplicating it again still.Starting again.Blam! Soft takeover.Simple definition.If you have one physical, movable control surface, like a potentiometer, that is controlling more than one control value, soft takeover means that when you switch into a mode, the value for that mode won't change until the control surface is physically moved into position, into the position corresponding with that value.After that...No, so when you switch into a mode, if the value coming out of the control pot doesn't match the value for that mode, then the output value won't change until the control surface is physically aligned with that value.Why is this so hard to explain? Simple.So, soft takeover.You have one control surface called a potentiometer, which provides a certain output value in a certain range, and then that output value is then mapped across to two or more control variables.So you might have the same range from the pot, then you map to one range for color values, and another range for motor control values, and then a third range for volume control values.And they're all different.So what happens is, each value in each mode will correspond to a certain physical position of the potentiometer.Half way for the physical potential will correspond to half.Why is this so hard to explain? God, we're getting all stoned again.This is dumb.No, no it's not.Okay, so soft takeover.So what you have is you have one control knob, and it's used to control one of several different variables.It only controls one at a time, and you can switch between them.But what can happen is, when you switch into a mode, the control knob might be in a position that doesn't...Starting again.So what you have...starting again.Blah, blah, blah, enter, enter.So what you have is one control pot, which obviously it only outputs one value, you can only read its single value, then that's controlling one of several different control variables.So for instance, you might have one control variable is the color of your PC case.The other one is the speed of a motor, and the other one is the volume of the PC app.So the control pot is only controlling one of those at a time, which is the active mode.And then the value for the inactive mode just doesn't change.So if you have all of them at max, for instance, and then you switch into color mode and you dial it all the way down to zero, well, the motor speed and the PC volume, they're going to stay at max.But then what can happen is that because each possible value for each control variable ties back to a physical position for the potentiometer, e.g.50% motor speed is the middle of the range for the potentiometer and so is 50% app volume, when you switch into a mode, the position of the potentiometer may not correspond exactly to the stored value of the control variable.Yes, nice.For instance, if you have color brightness and PC volume both at maximum, and then you switch into the color brightness mode and you turn it all the way down, now the knob is pointed towards zero and the color value is towards zero, and PC volume is still at max.So when you switch into volume mode again, you're going to have the volume knob is pointed at zero, but the volume variable is still at maximum.So there's a mismatch.Yes, nice.Now, without soft takeover or without some kind of takeover functionality, what will happen, of course, is the PC volume will immediately update to correspond to the new potentiometer position, and that's going to go to zero.So your audio is going to cut out.This could also happen the other way.If the volume is at zero and your knob is at max, well, guess what? Your volume is just about to max out instantly.Not fun.So what soft takeover does is if you switch into a mode and it detects that the physical position of the pot does not correspond to the stored value of the control variable for that mode, then it will wait and it won't update the value until the user physically moves the knob until its position corresponds with that exact value.After that, the lock is released, so to speak, and the value for the active mode will track the control pod exactly.So to give you an example, if you left the volume in at half and you switched into the volume mode with the knob at zero, if you start turning the knob towards halfway, nothing will happen.Nothing will happen.Nothing will happen until you reach halfway, and then as you continue turning past the halfway point, what you'll see over the whole course of the thing is that the volume stays at half, stays at half.It's 50, 50%, 50%, 50%, 51, 52.Keynote here, this would be much easier to explain with a diagram rather than verbally.Holy shit, so much easier.Okay, so that's soft takeover.