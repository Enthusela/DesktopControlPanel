Oh, just a quick one here.This is on motorized takeover.So I've just explained at length what soft takeover is, and I did implement it.I'll do a bit more on actually implementing the soft takeover thing later, but the point is I did implement it, and it does work, and it works nicely.There's a couple problems with it though.One, it does obviously require you to manually move the knobs into position before you can have any effect on the value.Now in most cases that's actually pretty natural because if you're going from zero and you want to make your max out or whatever, and it's at half, then you're just going to naturally grab that knob and turn it all the way to the plus side, and all that happens is that nothing happens until you reach 50, and then you start climbing off from 50.So very natural.Not so much fun when you turn things down and you're already below, so you have to turn it up and then down.It works, but it's a little fiddly, and because it's all software based it's possible for the value to be missed, and you go past and have to go the other way, and that kind of crap.So not perfect, not ideal, but the issue fundamentally is just because the user has to move the knob into position before any change system takes place.So the idea of motorized takeover is exactly that, rather than have the user update the position and use motors.And it's incredibly simple because in terms of coding it's just well if the value is less than the one you want, run the motor this way, and if the value is more then run it the other way, and you can just set up a very simple proportional device that causes it to update very smoothly.So yeah, after a bit of fiddling around with soft takeover and getting it to work but not satisfactorily, I decided to do a bit of prototyping, you know, and did some measuring, went to JCAR, got some micro motors and gears and stuff, and did some very slapdash kind of drilling of holes, because at this point I'm getting sick of the play with prototype and I just want to build shit, so I just want to get this to the proof of concept stage.And it does, I proved the concept, you know, the little motors that are geared into gears that are sitting on the shaft potentiometers, I had to drill out some of the gears but that's no biggie, and it works.The very simple proportional to error correction thing to drive the motors in a position works well, not perfectly, it does sometimes jiggle back and forth and I think that's an issue with obviously the update rate of the Arduino itself seems to come into play where it doesn't necessarily update the potentiometer fast enough for the two values to equal exactly, or you know, it might skip two or three outputs and anyone is in the middle of something, so it wiggles about, you know, you can see it sort of swinging past and then jittering back and forth and that kind of thing, but that, I mean, yeah, that can be fixed in software I think, so that's fine.The other consideration was of course feel.That's a key point here.One of the major cons of motorized takeover, which was probably the main one why I didn't second the biggest reason I look into it is because you'll be able to actually feel the motor turning through the knob when you change it.This was particularly noticeable and really irritating, well not quite irritating, but noticeable because I was using one-to-one gear ratio to connect the knob to a micromotor which itself is already a hundred to one gear ratio which means that every turn of the knob you're turning the motor, you know, a hundred times and the resistance builds up and so you end up with quite a scratchy feel to a tensiometer which is normally very smooth.That's a key point here from an ergonomic and sort of pleasantness of use perspective.You've got to consider the gearing and the motor type because if you're going to build motorized takeover, you have to minimize the impact on the feel of the control by introducing the motor.Specifically what that means is you want to be using, I guess it's close, I mean I forget which is higher low or whatever the fuck, but basically you don't want a really high gear ratio from where a turn of the knob results in a lot of turn of the motors because then the thing is going to build up, the amount of friction, the amount of friction is going to be multiplied.But on the other hand obviously you can't go too low, I mean ideally you would just have a really high gear ratio where you know one turn of the, when you go one turn of the knob, you know, results in way less than one turn of the motor, you know, that'd be very smooth.And then of course you have to consider well how accurate is that going to be, you know, is the motor going to have enough torque to start moving, when it does is it going to be able to stop slowly enough because you're effectively, you know, overdriving the knob.So yeah, so consider that.And in the design process for kind of final version of this, I did consider that and because I was kind of working within the constraints of J-car parts because I just couldn't find any gears and shit, I'll talk about that later, eventually I did settle on I think it works out to be like a six to one ratio from the motor to the knob, and that's using just straight DC motors, not geared micro motors, so that is a true six to one ratio and hopefully that's not too bad.You know, I can accept a little bit of, a little bit of, what do you call it, a little bit of grit or a little bit of unpleasantness in the turning of the knobs.Maybe I might even, obviously I can sort of lube up the gears, but I may even go to like a pulley system, which would hopefully sort of absorb a bit of that jittery kind of feeling.I think with luck I should be able to do that after the fact if I really need to, but I mean realistically I should just go buy the components and test this out myself and make sure it feels alright, but yeah, that's motorized takeover.