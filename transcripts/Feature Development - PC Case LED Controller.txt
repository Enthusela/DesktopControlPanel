Feature development, upgrading the ARGB controller to control my whole PC case.So the initial test for this was just done with one LED device, basically just running it off the Arduino itself, I believe, deliberately limiting the brightness in the LED count so that I wouldn't be pushing too much power through the LEDs.Very simple prototype.The process for upgrading to the rest of the PC case was straightforward to implement but introduced some issues, or rather I should say uncovered some issues that I would be dealing with for quite some time.So the FastLED library, very easy to work with, basically just duplicated a whole bunch of code for the different devices, freedoms, objects, block, I can probably actually delete that.So key point, enter, enter.Scaling the logic for the LED control up to eight devices was quite straightforward.Basically just a few extra declarations and defines, what you'd expect.The issue that I uncovered actually ended up being with the hardware.What I was seeing was, oh actually sorry, starting again, key point, enter, enter.The issue we had and started with the hardware when I attempted to power up all these LEDs.The current draw for each device is actually pretty high, it was sort of a peak of one amp per device, stable current of more like 0.8 amps, which across eight devices works out to nearly four amps, certainly more than four amps at peak.Did I say that right? 0.8 times eight.Sorry, yeah, nearly five amps.56, nearly six amps.God, I'm not a f**king idiot.Nearly six amps and more than six amps at peak potentially.So yeah, fair bit of juice and more critically at a low voltage.So summary of key point, needed a low voltage high amperage supply just to drive the LEDs independently of the case.Ordinarily this would be handled by the eSATA connection that the controller inside the case was using and the power was distributed that way, but for this I was obviously wanting it to run independently in the PC case.So the trick was to find a low voltage high amp supply.Second key point here, I started with this sort of obvious naive solution of getting a five volt three amp wall supply from just from JCAR.Three amp obviously isn't enough, but by limiting the brightness to half and generally just using a slightly lower than that total number of LEDs on each device, I was able to verify that I was keeping it under three amps and so that was all good.So turning them on, fine.Running them up to max within those constraints, fine.What I wasn't expecting was just random color noise across the devices.Sometimes they'd be fine, sometimes it'd be not, but the color on, you know, sometimes individual LEDs within one device, sometimes an entire device altogether, sometimes some combination of them would just randomly flicker back and forth.And I started to think, okay, I'm going to try to debug this.I debug, you know, what feel like the entire end-to-end software process.Tried all the different possible chipsets, tried all the different possible configurations of these devices, trying to find a protocol and parameters that would work.No good.Ran out of options there.Finally, or eventually, went on to testing the hardware side of things, you know, resolved wires, changed breadboard positions, discovered that yes, indeed, you know, if there was a loose breadboard wire it could happen, but even if everything was very solid it was still happening.And yeah, no luck.So, key point there, when switching from a single Arduino-based test device to eight external power supply powered multi-LED devices, suddenly this issue of color flickering came up.End of key point.So, after trying all the software and all the hardware options I could think of, in almost in desperation, just trying to think of fine sources of noise, I hooked the whole thing up to a AA battery pack that I took off a robot car and instantly the issues vanished.Switch it back from that obviously straight DC power supply to the wall-walled AC to DC power supply and the issues came back.So, key point here, enter, enter, I determined that the issue in the power supply, I determined that the issue of noise was caused by noise introduced to the circuit from the power supply.End of key point, enter, enter.So, as kind of a side note here, it does make sense that there would be, I guess, noise like that on the line.I mean, this is a very cheap power supply, it's obviously not designed for super high intensity applications or very low noise applications.It's more for like lamps or charges or that kind of thing, so small hobby electronics stuff.So, key point, enter, enter.So, while the noise tolerance of cheap AC-DC power converters is acceptable for low precision applications, it turns out my application is in fact high precision and very sensitive to noise.End of key point, enter, enter.Expanding out on that a bit, what I mean is that the single data line that these devices are using for signaling, as it turns out, is not purely database or package based or anything like that.It's actually timing based.So, each device on the strip, or in this case, LED fan, but they're effectively like strip, has a little controller.Each controller is written to in sequence, so if you tell it it has 10 LEDs on the device, the controller will write out to LED 0, LED 1, LED 2, all the way through LED 9, whether or not there is actually an LED 9 on the strip.If you say go to 10 and it has 5, it'll write to 5 and then appear to delay for another 5 writes and then keep going.Similarly, if you say it's got 10 and it's actually got 20, those last sort of N10, they aren't going to update.And rather than sort of addressing or prefixing the data along the line with data, it's all timing based.So, different parts of the message are delineated by very rapid pulses at sort of fixed intervals and that's what signals are.So, key point summing this up, the data transfer protocol for these ARGB devices is timing based rather than packet based.Different parts of the control data sequence are delineated by sending pulses with very tight timing definitions.And so, as a result, if there's any noise in the line which is throwing off that time, even a little bit, then that will have a dramatic effect on the accuracy of the data received by the devices.End of key point.So, in summary, I was kind of stuck.I could power these things, but the power supply itself was not keeping things clean.So, the design problem now is to find a very high voltage, sorry, high amperage, low voltage power supply that can supply very clean current to all my devices and ideally would have even more capacity so that I could be connecting RGB strips around the room directly and powering them as well.