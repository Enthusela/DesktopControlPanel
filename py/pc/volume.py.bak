from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL

from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume, ISimpleAudioVolume
import os
import re
import socket
import traceback
import time

pc_cmds = {"A": "0"}
volume_cmds = {"VM": 0.75, "V1": 0.5, "V2": 0.5, "V3": 0.5}

def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func
    return decorate


def main():
    # server_socket = connect_raspi()
    # if server_socket is None:
    #     print("Failed to connect to server.")
    #     return

    while True:
        # Process server data
        # pc_cmds, volume_cmds = get_cmds(server_socket)
        if False and pc_cmds:
            try:
                set_audio_device(pc_cmds["A"])
            except Exception as e:
                traceback.print_exc()
                print("set_audio_device: Exception message: " + str(e))
        if volume_cmds:
            try:
                set_audio_levels(volume_cmds)
            except Exception as e:
                traceback.print_exc()
                print("set_audio_levels: Exception message: " + str(e))


# @static_vars(pc_cmds = {"A": "0"}, volume_cmds = {"VM": 0.5, "V1": 0.5, "V2": 0.5, "V3": 0.5})
def get_cmds(server_socket):
    try:
        server_socket.send("I'm still listening.".encode())
        server_cmds = server_socket.recv(1024).decode()
        # print(server_cmds.ljust(120), end="\r")
    except Exception as e:
        traceback.print_exc()
        print("Exception message: " + str(e))
        return

    # Parse commands from serial data
    if server_cmds:
        try:
            server_cmds = re.split(",", server_cmds)
        except Exception as e:
            traceback.print_exc()
            print("Exception message: " + str(e))
    
    if server_cmds and server_cmds[0] == "_":
        # TODO: remove this hard-coding dependency
        for server_cmd in server_cmds[1:]:
            # Split command into control and value. If the command is not valid, skip it.
            try:
                cmd, value = re.split(" ", server_cmd)
            except Exception as e:
                traceback.print_exc()
                print("Exception message: " + str(e))
                continue
            if cmd in pc_cmds.keys():
                pc_cmds[cmd] = value
            elif cmd in volume_cmds.keys():
                volume_cmds[cmd] = prct_from_10bit(value)


def connect_raspi():
    pi_address = "192.168.50.202"
    port = 5000
    print("Connecting to server at " + pi_address + ":" + str(port) + "...")
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.connect((pi_address, port))
        print("Connected to " + str(server_socket.getpeername()))
    except Exception as e:
        print("Failed to connect.")
        traceback.print_exc()
        print("Exception message: " + str(e))
        return None
    
    return server_socket


def disconnect_raspi(server_socket):
    print("Disconnecting from server...")
    try:
        server_socket.send("Goodbye.".encode())
        server_socket.close()
    except KeyboardInterrupt:
        print("KeyboardInterrupt")
    except Exception as e:
        print("Failed to send message to server.")
        traceback.print_exc()
        print("Exception message: " + str(e))    

@static_vars(audio_device_prev="0")
def set_audio_device(audio_device):
    """Sets the audio output device to the specified device if it is different from the previous device"""
    if audio_device != set_audio_device.audio_device_prev:
        audio_device_headphones = "1"
        audio_device_soundcard = "0"
        nircmd_path = "C:\\Users\\natha\\OneDrive\\Documents\\Software\\Utilities\\nircmd.exe"
        nircmd_sound_device_cmd = nircmd_path + " " + "setdefaultsounddevice" + " "
        nircmd_headphones_name = "\"Gaming Headphones\""
        nircmd_soundcard_name = "\"Soundcard\""
        nircmd_set_headphones_cmd = "cmd /c " + nircmd_sound_device_cmd + nircmd_headphones_name
        nircmd_set_soundcard_cmd = "cmd /c " + nircmd_sound_device_cmd + nircmd_soundcard_name
        
        if audio_device == audio_device_headphones:
            nircmd_cmd = nircmd_set_headphones_cmd
        elif audio_device == audio_device_soundcard:
            nircmd_cmd = nircmd_set_soundcard_cmd
        else:
            return
        
        try:
            os.system("cmd /c " + nircmd_cmd)
            print("Sent nircmd: " + nircmd_cmd)
        except:
            print("Failed nircmd: " + nircmd_cmd)


def set_audio_levels(volume_cmds):
    set_audio_volume_main(volume_cmds["VM"])
    # set_audio_volume_app([volume_cmds["V1"], volume_cmds["V2"], volume_cmds["V3"]])


def set_audio_volume_main(level):
    # TODO: remember why this is its own function
    # TODO: try a non-blocking delay on this function
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        volume.SetMasterVolumeLevelScalar(level, None)

        print(devices, interface, volume_ptr)
    except Exception as e:
        print("Main volume error: " + str(e))


def set_audio_volume_app(levels):
    audio_sessions = [
        {"name": "Overwatch",       "id": "Overwatch.exe",  "level": 2},
        {"name": "Call Of Duty",    "id": "cod.exe",        "level": 2},
        {"name": "Insurgency",      "id": "InsurgencyClient-Win64-Shipping.exe", "level": 2},
        {"name": "Chrome",          "id": "chrome.exe",     "level": 1},
        {"name": "Firefox",         "id": "firefox.exe",    "level": 1},
        {"name": "Discord",         "id": "Discord.exe",    "level": 0},
        {"name": "Edge",            "id": "msedge.exe",     "level": 1},
        {"name": "Spotify",         "id": "Spotify.exe",    "level": 1}
    ]
    # Get list of valid audio sessions currently open
    try:
        audio_interfaces = get_audio_interfaces(audio_sessions)
    except Exception as e:
        print("Error: Failed to get audio interfaces")
        print("Exception message: " + str(e))
        return
    # Set levels for individual audio sessions
    for interface in audio_interfaces:
        interface_level = -1
        for session in audio_sessions:
            if interface["id"] == session["id"]:
                interface_level = session["level"]
                break
        if interface_level != -1:
            try:
                interface["interface"].SetMasterVolume(levels[interface_level], None)
            except Exception as e:
                print("App volume error: " + str(e))


def get_audio_interfaces(audio_sessions):
    try:
        active_sessions = AudioUtilities.GetAllSessions()
    except Exception as e:
        traceback.print_exc()
        print("AudioUtilities.GetAllSessions: Exception message: " + str(e))
        return None
    # Search sessions for valid applications and return dict containing associated interface objects
    audio_interfaces = []
    required_session_ids = [session["id"] for session in audio_sessions]
    for session in active_sessions:
        session_id = re.split("\\\\|%",session.Identifier)[-2]
        if session_id in required_session_ids:
            try:
                interface = session._ctl.QueryInterface(ISimpleAudioVolume)
            except Exception as e:
                traceback.print_exc()
                print("ISimpleAudioVolume: Exception message: " + str(e))
                continue
            audio_interfaces.append({"id": session_id, "interface": interface})
    return audio_interfaces


def prct_from_10bit(value):
    return round(float(value) / 1023.0 * 1.0, 2)


main()